Flask Video Notes on User Roles, Permissions, and Decorators

-> Assigning Roles to New Users
   -> When a new user is created in a Flask application, it's essential to assign them a role immediately. This ensures that users have appropriate access rights from the start
   -> The user constructor (`__init__` method) is a logical place to assign roles since it is called when a user is created
   -> Role Assignment Process:
     -> Check if the user already has a role assigned. This can be done with a conditional check, for example: `if not self.role:`
     -> If the user’s email matches a predefined admin email (e.g., `admin@example.com`), assign them the "admin" role
       In Python, you can compare the email like so:
       ```python
       if self.email == "admin@example.com":
           self.role = "admin"
       ```
     -> Admins must confirm their accounts before the admin role is fully activated. This can be handled by checking a `confirmed` attribute
     -> If no special conditions are met, the user is assigned the default "user" role:
       ```python
       if not self.role:
           self.role = "user"
       ```

-> Helper Methods for User Permissions
   -> It is crucial to have helper methods that simplify checking user permissions
   -> `can_do_something`: A method to check if a user has a specific permission (e.g., accessing a resource or performing an action)
     - Example:
       ```python
       def can_do_something(self):
           return "can_do_something" in self.permissions
       ```
   -> `is_administrator`: A method to check if the user is an administrator, useful for permission checks in routes
     - Example:
       ```python
       def is_administrator(self):
           return self.role == "admin"
       ```
   -> Anonymous Users:
     -> For users who haven’t logged in (anonymous users), you can set default methods that return `False` for permissions, as they don’t have any access
     -> Python code for an anonymous user might look like this:
       ```python
       class AnonymousUser:
           def is_administrator(self):
               return False
           def can_do_something(self):
               return False
       ```

-> Handling Anonymous Users
   -> After defining the anonymous user class, you need to integrate it with Flask-Login’s `AnonymousUserMixin` to ensure proper handling within the login manager
   -> Example of integrating with Flask-Login:
     ```python
     from flask_login import AnonymousUserMixin
     
     class AnonymousUser(AnonymousUserMixin):
         def is_administrator(self):
             return False
         def can_do_something(self):
             return False
     ```
   -> You then need to let Flask-Login know about the new anonymous user class by setting it in the login manager:
     ```python
     login_manager.anonymous_user = AnonymousUser
     ```

-> Using Decorators for Access Control
   -> Flask provides built-in decorators such as `@login_required` to enforce authentication. However, custom decorators are useful for more granular control over who can access specific pages
   -> Custom Decorators:
     -> To restrict access based on permissions, you can create a custom decorator
       Example of a permission-based decorator:
       ```python
       from functools import wraps
       from flask import abort
       
       def permission_required(permission):
           def decorator(func):
               @wraps(func)
               def wrapper(*args, **kwargs):
                   if not current_user.can(permission):
                       abort(403)  # Forbidden error
                   return func(*args, **kwargs)
               return wrapper
           return decorator
       ```
     -> This decorator can be used on routes that require a specific permission to access
     -> For convenience, create an `@admin_required` decorator that checks if the user is an admin:
       ```python
       def admin_required(func):
           return permission_required('admin')(func)
       ```

-> Blueprints and Route Protection
   -> In a Flask application with blueprints, you can import your decorators and apply them to specific routes in your view functions (`views.py`)
   -> Example of applying `@admin_required` and `@login_required` decorators to restrict access to an admin-only route:
     ```python
     from flask_login import login_required
     from yourapp import admin_required
     
     @app.route('/admin')
     @login_required
     @admin_required
     def admin_panel():
         return render_template('admin_panel.html')
     ```
   -> Note: Decorators are applied in the order in which they are listed. The `@admin_required` decorator should come after `@login_required` to ensure the user is authenticated before checking if they are an admin

-> Testing Permissions
   -> Testing route access control:
     -> When logged in as a regular user, trying to access the admin route will result in a 403 Forbidden error
     -> Example of handling this error:
       ```python
       @app.errorhandler(403)
       def forbidden(error):
           return render_template('403.html'), 403
       ```
     -> When logged in as an admin, access to the route will be allowed. This can be tested by logging in as an admin and visiting the route

-> Working with Permissions in Templates
   -> To make permissions easily accessible in Flask templates and view functions, you can inject the permissions class into the Flask context
   -> Flask’s `g` object or `current_user` from `flask_login` can be used to provide the permissions object to templates
     Example of injecting permissions into a template:
     ```python
     @app.context_processor
     def inject_permissions():
         return dict(can_do_something=current_user.can_do_something())
     ```
   -> This way, permissions are available in all templates without the need to import them explicitly in each view or template
   -> In the template, you can now check permissions directly:
     ```html
     {% if can_do_something %}
         <p>You can perform this action!</p>
     {% else %}
         <p>You do not have permission to perform this action</p>
     {% endif %}
